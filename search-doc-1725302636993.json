[{"title":"AutoScaleFrame","type":0,"sectionRef":"#","url":"/OnyxUI/api/AutoScaleFrame","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"AutoScaleFrame","url":"/OnyxUI/api/AutoScaleFrame#types","content":" "},{"title":"AutoScaleFrameProps​","type":1,"pageTitle":"AutoScaleFrame","url":"/OnyxUI/api/AutoScaleFrame#AutoScaleFrameProps","content":"&lt;/&gt; interface AutoScaleFrameProps { ...: BaseProps BaseResolution: CanBeState&lt;Vector2 &gt;? MinScale: CanBeState&lt;number&gt;? MaxScale: CanBeState&lt;number&gt;? ScaleMultiplier: CanBeState&lt;number&gt;? }  "},{"title":"Avatar","type":0,"sectionRef":"#","url":"/OnyxUI/api/Avatar","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Avatar","url":"/OnyxUI/api/Avatar#types","content":" "},{"title":"AvatarProps​","type":1,"pageTitle":"Avatar","url":"/OnyxUI/api/Avatar#AvatarProps","content":"&lt;/&gt; interface AvatarProps { ...: ImageProps Image: CanBeState&lt;string&gt;? RingEnabled: CanBeState&lt;boolean&gt;? RingColor: CanBeState&lt;Color3 &gt;? RingThickness: CanBeState&lt;number&gt;? IndicatorEnabled: CanBeState&lt;boolean&gt;? IndicatorColor: CanBeState&lt;Color3 &gt;? IndicatorIcon: CanBeState&lt;string&gt;? IndicatorIconColor: CanBeState&lt;Color3 &gt;? IndicatorCornerRadius: CanBeState&lt;UDim &gt;? }  "},{"title":"BaseButton","type":0,"sectionRef":"#","url":"/OnyxUI/api/BaseButton","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BaseButton","url":"/OnyxUI/api/BaseButton#types","content":" "},{"title":"BaseButtonProps​","type":1,"pageTitle":"BaseButton","url":"/OnyxUI/api/BaseButton#BaseButtonProps","content":"&lt;/&gt; interface BaseButtonProps { ...: BaseProps Disabled: CanBeState&lt;boolean&gt;? OnActivated: CanBeState&lt;() → ()&gt;? OnMouseEnter: CanBeState&lt;() → ()&gt;? OnMouseLeave: CanBeState&lt;() → ()&gt;? OnMouseButton1Down: CanBeState&lt;() → ()&gt;? OnMouseButton1Up: CanBeState&lt;() → ()&gt;? IsHovering: CanBeState&lt;boolean&gt;? IsHolding: CanBeState&lt;boolean&gt;? HoverSound: CanBeState&lt;Sound &gt;? ClickSound: CanBeState&lt;Sound &gt;? }  "},{"title":"Card","type":0,"sectionRef":"#","url":"/OnyxUI/api/Card","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Card","url":"/OnyxUI/api/Card#types","content":" "},{"title":"CardProps​","type":1,"pageTitle":"Card","url":"/OnyxUI/api/Card#CardProps","content":"&lt;/&gt; interface CardProps { ...: FrameProps }  "},{"title":"Badge","type":0,"sectionRef":"#","url":"/OnyxUI/api/Badge","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Badge","url":"/OnyxUI/api/Badge#types","content":" "},{"title":"BadgeProps​","type":1,"pageTitle":"Badge","url":"/OnyxUI/api/Badge#BadgeProps","content":"&lt;/&gt; interface BadgeProps { ...: FrameProps Content: CanBeState&lt;{string}&gt;? ContentWrapped: CanBeState&lt;boolean&gt;? Color: CanBeState&lt;Color3 &gt;? ContentColor: CanBeState&lt;Color3 &gt;? ContentSize: CanBeState&lt;number&gt;? ContentWrapped: CanBeState&lt;number&gt;? }  "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/OnyxUI/api/Checkbox","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Checkbox","url":"/OnyxUI/api/Checkbox#types","content":" "},{"title":"CheckboxProps​","type":1,"pageTitle":"Checkbox","url":"/OnyxUI/api/Checkbox#CheckboxProps","content":"&lt;/&gt; interface CheckboxProps { ...: BaseButtonProps Checked: CanBeState&lt;boolean&gt;? Icon: CanBeState&lt;string&gt;? Color: CanBeState&lt;Color3 &gt;? }  "},{"title":"Frame","type":0,"sectionRef":"#","url":"/OnyxUI/api/Frame","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Frame","url":"/OnyxUI/api/Frame#types","content":" "},{"title":"FrameProps​","type":1,"pageTitle":"Frame","url":"/OnyxUI/api/Frame#FrameProps","content":"&lt;/&gt; interface FrameProps { ...: BaseProps }  "},{"title":"Button","type":0,"sectionRef":"#","url":"/OnyxUI/api/Button","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Button","url":"/OnyxUI/api/Button#types","content":" "},{"title":"ButtonProps​","type":1,"pageTitle":"Button","url":"/OnyxUI/api/Button#ButtonProps","content":"&lt;/&gt; interface ButtonProps { ...: BaseProps Disabled: CanBeState&lt;boolean&gt;? Content: CanBeState&lt;{string}&gt;? Style: CanBeState&lt;string&gt;? Color: CanBeState&lt;Color3 &gt;? ContentColor: CanBeState&lt;Color3 &gt;? ContentSize: CanBeState&lt;number&gt;? ContentWrapped: CanBeState&lt;boolean&gt;? IsHolding: CanBeState&lt;boolean&gt;? }  "},{"title":"Divider","type":0,"sectionRef":"#","url":"/OnyxUI/api/Divider","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Divider","url":"/OnyxUI/api/Divider#types","content":" "},{"title":"DividerProps​","type":1,"pageTitle":"Divider","url":"/OnyxUI/api/Divider#DividerProps","content":"&lt;/&gt; interface DividerProps { ...: FrameProps Length: CanBeState&lt;UDim &gt;? FillDirection: CanBeState&lt;Enum.FillDirection&gt;? Color: CanBeState&lt;Color3 &gt;? Transparency: CanBeState&lt;number&gt;? Spacing: CanBeState&lt;UDim &gt;? }  "},{"title":"Group","type":0,"sectionRef":"#","url":"/OnyxUI/api/Group","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Group","url":"/OnyxUI/api/Group#types","content":" "},{"title":"GroupProps​","type":1,"pageTitle":"Group","url":"/OnyxUI/api/Group#GroupProps","content":"&lt;/&gt; interface GroupProps { ...: BaseProps GroupTransparency: CanBeState&lt;number&gt;? GroupColor3: CanBeState&lt;Color3 &gt;? }  "},{"title":"Heading","type":0,"sectionRef":"#","url":"/OnyxUI/api/Heading","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Heading","url":"/OnyxUI/api/Heading#types","content":" "},{"title":"HeadingProps​","type":1,"pageTitle":"Heading","url":"/OnyxUI/api/Heading#HeadingProps","content":"&lt;/&gt; interface HeadingProps { ...: TextProps HeadingSize: CanBeState&lt;number&gt;? TextSize: CanBeState&lt;number&gt;? }  "},{"title":"IconText","type":0,"sectionRef":"#","url":"/OnyxUI/api/IconText","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"IconText","url":"/OnyxUI/api/IconText#types","content":" "},{"title":"IconTextProps​","type":1,"pageTitle":"IconText","url":"/OnyxUI/api/IconText#IconTextProps","content":"&lt;/&gt; interface IconTextProps { ...: FrameProps Content: CanBeState&lt;{string}&gt;? ContentColor: CanBeState&lt;Color3 &gt;? ContentSize: CanBeState&lt;number&gt;? ContentTransparency: CanBeState&lt;number&gt;? ContentWrapped: CanBeState&lt;boolean&gt;? ContentRichText: CanBeState&lt;boolean&gt;? ContentFontFace: CanBeState&lt;Font &gt;? }  "},{"title":"IconButton","type":0,"sectionRef":"#","url":"/OnyxUI/api/IconButton","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"IconButton","url":"/OnyxUI/api/IconButton#types","content":" "},{"title":"IconButtonProps​","type":1,"pageTitle":"IconButton","url":"/OnyxUI/api/IconButton#IconButtonProps","content":"&lt;/&gt; interface IconButtonProps { ...: ButtonProps Image: CanBeState&lt;string&gt;? }  "},{"title":"Icon","type":0,"sectionRef":"#","url":"/OnyxUI/api/Icon","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Icon","url":"/OnyxUI/api/Icon#types","content":" "},{"title":"IconProps​","type":1,"pageTitle":"Icon","url":"/OnyxUI/api/Icon#IconProps","content":"&lt;/&gt; interface IconProps { ...: ImageProps }  "},{"title":"MenuFrame","type":0,"sectionRef":"#","url":"/OnyxUI/api/MenuFrame","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"MenuFrame","url":"/OnyxUI/api/MenuFrame#types","content":" "},{"title":"MenuFrameProps​","type":1,"pageTitle":"MenuFrame","url":"/OnyxUI/api/MenuFrame#MenuFrameProps","content":"&lt;/&gt; interface MenuFrameProps { ...: GroupProps }  "},{"title":"Base","type":0,"sectionRef":"#","url":"/OnyxUI/api/Base","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Base","url":"/OnyxUI/api/Base#types","content":" "},{"title":"BaseProps​","type":1,"pageTitle":"Base","url":"/OnyxUI/api/Base#BaseProps","content":"&lt;/&gt; interface BaseProps { ...: BaseProps ClassName: string? Name: CanBeState&lt;string&gt;? Parent: CanBeState&lt;Instance &gt;? Position: CanBeState&lt;UDim2 &gt;? Rotation: CanBeState&lt;number&gt;? AnchorPoint: CanBeState&lt;Vector2 &gt;? Size: CanBeState&lt;UDim2 &gt;? AutomaticSize: CanBeState&lt;Enum.AutomaticSize&gt;? Visible: CanBeState&lt;boolean&gt;? ZIndex: CanBeState&lt;number&gt;? LayoutOrder: CanBeState&lt;number&gt;? ClipsDescendants: CanBeState&lt;boolean&gt;? Active: CanBeState&lt;boolean&gt;? Selectable: CanBeState&lt;boolean&gt;? Interactable: CanBeState&lt;boolean&gt;? BackgroundColor3: CanBeState&lt;Color3 &gt;? BackgroundTransparency: CanBeState&lt;number&gt;? NextSelectionDown: CanBeState&lt;GuiObject &gt;? NextSelectionUp: CanBeState&lt;GuiObject &gt;? NextSelectionRight: CanBeState&lt;GuiObject &gt;? NextSelectionLeft: CanBeState&lt;GuiObject &gt;? SelectionImageObject: CanBeState&lt;GuiObject &gt;? SelectionOrder: CanBeState&lt;number&gt;? SizeConstraint: CanBeState&lt;Enum.SizeConstraint&gt;? AutoLocalize: CanBeState&lt;boolean&gt;? RootLocalizationTable: CanBeState&lt;LocalizationTable &gt;? SelectionBehaviorDown: CanBeState&lt;Enum.SelectionBehavior&gt;? SelectionBehaviorUp: CanBeState&lt;Enum.SelectionBehavior&gt;? SelectionBehaviorRight: CanBeState&lt;Enum.SelectionBehavior&gt;? SelectionBehaviorLeft: CanBeState&lt;Enum.SelectionBehavior&gt;? SelectionGroup: CanBeState&lt;boolean&gt;? CornerRadius: CanBeState&lt;UDim &gt;? Padding: CanBeState&lt;UDim &gt;? PaddingTop: CanBeState&lt;UDim &gt;? PaddingLeft: CanBeState&lt;UDim &gt;? PaddingRight: CanBeState&lt;UDim &gt;? PaddingBottom: CanBeState&lt;UDim &gt;? Scale: CanBeState&lt;number&gt;? StrokeEnabled: CanBeState&lt;boolean&gt;? StrokeThickness: CanBeState&lt;number&gt;? StrokeColor: CanBeState&lt;Color3 &gt;? StrokeTransparency: CanBeState&lt;number&gt;? StrokeLineJoinMode: CanBeState&lt;Enum.LineJoinMode&gt;? StrokeApplyStrokeMode: CanBeState&lt;Enum.ApplyStrokeMode&gt;? GradientEnabled: CanBeState&lt;boolean&gt;? GradientColor: CanBeState&lt;ColorSequence &gt;? GradientOffset: CanBeState&lt;UDim &gt;? GradientRotation: CanBeState&lt;number&gt;? GradientTransparency: CanBeState&lt;number&gt;? AspectRatio: CanBeState&lt;number&gt;? AspectType: CanBeState&lt;Enum.AspectType&gt;? DominantAxis: CanBeState&lt;Enum.DominantAxis&gt;? ListEnabled: CanBeState&lt;boolean&gt;? ListPadding: CanBeState&lt;UDim &gt;? ListFillDirection: CanBeState&lt;Enum.FillDirection&gt;? ListSortOrder: CanBeState&lt;Enum.SortOrder&gt;? ListWraps: CanBeState&lt;boolean&gt;? ListHorizontalAlignment: CanBeState&lt;Enum.HorizontalAlignment&gt;? ListHorizontalFlex: CanBeState&lt;boolean&gt;? ListVerticalAlignment: CanBeState&lt;Enum.VerticalAlignment&gt;? ListVerticalFlex: CanBeState&lt;boolean&gt;? ListItemLineAlignment: CanBeState&lt;Enum.ItemLineAlignment&gt;? GridEnabled: CanBeState&lt;boolean&gt;? GridCellPadding: CanBeState&lt;UDim &gt;? GridCellSize: CanBeState&lt;UDim2 &gt;? GridFillDirection: CanBeState&lt;Enum.FillDirection&gt;? GridFillDirectionMaxCells: CanBeState&lt;number&gt;? GridSortOrder: CanBeState&lt;Enum.SortOrder&gt;? GridStartCorner: CanBeState&lt;Enum.StartCorner&gt;? GridHorizontalAlignment: CanBeState&lt;Enum.HorizontalAlignment&gt;? GridVerticalAlignment: CanBeState&lt;Enum.VerticalAlignment&gt;? TableEnabled: CanBeState&lt;boolean&gt;? TablePadding: CanBeState&lt;UDim &gt;? TableFillEmptySpaceColumns: CanBeState&lt;boolean&gt;? TableFillEmptySpaceRows: CanBeState&lt;boolean&gt;? TableFillDirection: CanBeState&lt;Enum.FillDirection&gt;? TableSortOrder: CanBeState&lt;Enum.SortOrder&gt;? TableMajorAxis: CanBeState&lt;Enum.TableMajorAxis&gt;? TableHorizontalAlignment: CanBeState&lt;Enum.HorizontalAlignment&gt;? TableVerticalAlignment: CanBeState&lt;Enum.VerticalAlignment&gt;? PageEnabled: CanBeState&lt;boolean&gt;? PageAnimated: CanBeState&lt;boolean&gt;? PageCircular: CanBeState&lt;boolean&gt;? PageEasingDirection: CanBeState&lt;Enum.EasingDirection&gt;? PageEasingStyle: CanBeState&lt;Enum.EasingStyle&gt;? PagePadding: CanBeState&lt;UDim &gt;? PageTweenTime: CanBeState&lt;number&gt;? PageFillDirection: CanBeState&lt;Enum.FillDirection&gt;? PageSortOrder: CanBeState&lt;Enum.SortOrder&gt;? PageHorizontalAlignment: CanBeState&lt;Enum.HorizontalAlignment&gt;? PageVerticalAlignment: CanBeState&lt;Enum.VerticalAlignment&gt;? PageGamepadInputEnabled: CanBeState&lt;boolean&gt;? PageScrollWheelInputEnabled: CanBeState&lt;boolean&gt;? PageTouchInputEnabled: CanBeState&lt;boolean&gt;? FlexMode: CanBeState&lt;Enum.UIFlexMode&gt;? FlexItemLineAlignment: CanBeState&lt;Enum.ItemLineAlignment&gt;? FlexGrowRatio: CanBeState&lt;number&gt;? FlexShrinkRatio: CanBeState&lt;number&gt;? MaxSize: CanBeState&lt;Vector2 &gt;? MinSize: CanBeState&lt;Vector2 &gt;? MaxTextSize: CanBeState&lt;number&gt;? MinTextSize: CanBeState&lt;number&gt;? }  "},{"title":"ProgressBar","type":0,"sectionRef":"#","url":"/OnyxUI/api/ProgressBar","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ProgressBar","url":"/OnyxUI/api/ProgressBar#types","content":" "},{"title":"ProgressBarProps​","type":1,"pageTitle":"ProgressBar","url":"/OnyxUI/api/ProgressBar#ProgressBarProps","content":"&lt;/&gt; interface ProgressBarProps { ...: GroupProps Progress: CanBeState&lt;number&gt;? Color: CanBeState&lt;Color3 &gt;? Direction: CanBeState&lt;Enum.FillDirection&gt;? Inverted: CanBeState&lt;boolean&gt;? Length: CanBeState&lt;UDim &gt;? }  "},{"title":"Image","type":0,"sectionRef":"#","url":"/OnyxUI/api/Image","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Image","url":"/OnyxUI/api/Image#types","content":" "},{"title":"ImageProps​","type":1,"pageTitle":"Image","url":"/OnyxUI/api/Image#ImageProps","content":"&lt;/&gt; interface ImageProps { ...: BaseProps Image: CanBeState&lt;string&gt;? FallbackImage: CanBeState&lt;string&gt;? ImageColor3: CanBeState&lt;Color3 &gt;? ImageTransparency: CanBeState&lt;number&gt;? ImageRectSize: CanBeState&lt;Vector2 &gt;? ResampleMode: CanBeState&lt;Enum.ResamplerMode&gt;? ScaleType: CanBeState&lt;Enum.ScaleType&gt;? SliceCenter: CanBeState&lt;Rect &gt;? SliceScale: CanBeState&lt;number&gt;? TileSize: CanBeState&lt;UDim2 &gt;? }  "},{"title":"NumberSpinner","type":0,"sectionRef":"#","url":"/OnyxUI/api/NumberSpinner","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NumberSpinner","url":"/OnyxUI/api/NumberSpinner#types","content":" "},{"title":"NumberSpinnerProps​","type":1,"pageTitle":"NumberSpinner","url":"/OnyxUI/api/NumberSpinner#NumberSpinnerProps","content":"&lt;/&gt; interface NumberSpinnerProps { ...: TextProps Value: CanBeState&lt;number&gt;? Prefix: CanBeState&lt;string&gt;? Suffix: CanBeState&lt;string&gt;? Decimals: CanBeState&lt;boolean&gt;? Duration: CanBeState&lt;number&gt;? Commas: CanBeState&lt;boolean&gt;? }  "},{"title":"SwitchInput","type":0,"sectionRef":"#","url":"/OnyxUI/api/SwitchInput","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SwitchInput","url":"/OnyxUI/api/SwitchInput#types","content":" "},{"title":"SwitchInputProps​","type":1,"pageTitle":"SwitchInput","url":"/OnyxUI/api/SwitchInput#SwitchInputProps","content":"&lt;/&gt; interface SwitchInputProps { ...: FrameProps Switched: CanBeState&lt;boolean&gt;? Disabled: CanBeState&lt;boolean&gt;? Color: CanBeState&lt;Color3 &gt;? }  "},{"title":"SwitchGroup","type":0,"sectionRef":"#","url":"/OnyxUI/api/SwitchGroup","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SwitchGroup","url":"/OnyxUI/api/SwitchGroup#types","content":" "},{"title":"SwitchGroupProps​","type":1,"pageTitle":"SwitchGroup","url":"/OnyxUI/api/SwitchGroup#SwitchGroupProps","content":"&lt;/&gt; interface SwitchGroupProps { ...: SwitchInputProps }  "},{"title":"TextArea","type":0,"sectionRef":"#","url":"/OnyxUI/api/TextArea","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"TextArea","url":"/OnyxUI/api/TextArea#types","content":" "},{"title":"TextAreaProps​","type":1,"pageTitle":"TextArea","url":"/OnyxUI/api/TextArea#TextAreaProps","content":"&lt;/&gt; interface TextAreaProps { ...: TextInputProps }  "},{"title":"ScrollingFrame","type":0,"sectionRef":"#","url":"/OnyxUI/api/ScrollingFrame","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ScrollingFrame","url":"/OnyxUI/api/ScrollingFrame#types","content":" "},{"title":"ScrollingFrameProps​","type":1,"pageTitle":"ScrollingFrame","url":"/OnyxUI/api/ScrollingFrame#ScrollingFrameProps","content":"&lt;/&gt; interface ScrollingFrameProps { ...: BaseProps AutomaticCanvasSize: CanBeState&lt;Enum.AutomaticSize&gt;? BottomImage: CanBeState&lt;string&gt;? CanvasPosition: CanBeState&lt;Vector2 &gt;? CanvasSize: CanBeState&lt;UDim2 &gt;? ElasticBehavior: CanBeState&lt;Enum.ElasticBehavior&gt;? HorizontalScrollBarInset: CanBeState&lt;Enum.ScrollBarInset&gt;? MidImage: CanBeState&lt;string&gt;? ScrollBarImageColor3: CanBeState&lt;Color3 &gt;? ScrollBarImageTransparency: CanBeState&lt;number&gt;? ScrollBarThickness: CanBeState&lt;number&gt;? ScrollingDirection: CanBeState&lt;Enum.ScrollingDirection&gt;? ScrollingEnabled: CanBeState&lt;boolean&gt;? TopImage: CanBeState&lt;string&gt;? VerticalScrollBarInset: CanBeState&lt;Enum.ScrollBarInset&gt;? VerticalScrollBarPosition: CanBeState&lt;Enum.VerticalScrollBarPosition&gt;? }  "},{"title":"Text","type":0,"sectionRef":"#","url":"/OnyxUI/api/Text","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Text","url":"/OnyxUI/api/Text#types","content":" "},{"title":"TextProps​","type":1,"pageTitle":"Text","url":"/OnyxUI/api/Text#TextProps","content":"&lt;/&gt; interface TextProps { ...: BaseProps Text: CanBeState&lt;string&gt;? TextColor3: CanBeState&lt;Color3 &gt;? TextSize: CanBeState&lt;number&gt;? RichText: CanBeState&lt;boolean&gt;? FontFace: CanBeState&lt;Font &gt;? TextWrapped: CanBeState&lt;boolean&gt;? TextXAlignment: CanBeState&lt;Enum.TextXAlignment&gt;? TextYAlignment: CanBeState&lt;Enum.TextYAlignment&gt;? Font: CanBeState&lt;Enum.Font&gt;? TextScaled: CanBeState&lt;boolean&gt;? TextTruncate: CanBeState&lt;boolean&gt;? LineHeight: CanBeState&lt;number&gt;? LocalizedText: CanBeState&lt;string&gt;? MaxVisibleGraphemes: CanBeState&lt;number&gt;? TextTransparency: CanBeState&lt;number&gt;? }  "},{"title":"TextInput","type":0,"sectionRef":"#","url":"/OnyxUI/api/TextInput","content":"","keywords":""},{"title":"Themer","type":0,"sectionRef":"#","url":"/OnyxUI/api/Themer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Themer","url":"/OnyxUI/api/Themer#properties","content":" "},{"title":"Theme​","type":1,"pageTitle":"Themer","url":"/OnyxUI/api/Themer#Theme","content":"&lt;/&gt; Themer.Theme: table The currently active theme. Use this to reference theme properties. "},{"title":"Functions​","type":1,"pageTitle":"Themer","url":"/OnyxUI/api/Themer#functions","content":" "},{"title":"Set​","type":1,"pageTitle":"Themer","url":"/OnyxUI/api/Themer#Set","content":"&lt;/&gt; Themer:Set(Theme: Theme) → () Sets the current theme to the given Theme parameter. "},{"title":"Util","type":0,"sectionRef":"#","url":"/OnyxUI/api/Util","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Util","url":"/OnyxUI/api/Util#properties","content":" "},{"title":"Colors​","type":1,"pageTitle":"Util","url":"/OnyxUI/api/Util#Colors","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Util.Colors: {[string]: any} Colors imported from TailwindCSS's color palette. "},{"title":"Functions​","type":1,"pageTitle":"Util","url":"/OnyxUI/api/Util#functions","content":" "},{"title":"CombineProps​","type":1,"pageTitle":"Util","url":"/OnyxUI/api/Util#CombineProps","content":"&lt;/&gt; Util.CombineProps( Source: {[any]: PubTypes.CanBeState&lt;any&gt;}, Target: {[any]: PubTypes.CanBeState&lt;any&gt;}, ExcludedKeys: {any}? ) → () Combines two sets of props for easy passthrough, adding Source's props to Target.  "},{"title":"EnsureValue​","type":1,"pageTitle":"Util","url":"/OnyxUI/api/Util#EnsureValue","content":"&lt;/&gt; Util.EnsureValue( PreferredValue: any, ValueType: string, FallbackValue: any ) → () Converts the PreferredValue to a Fusion Value object, if it is not one already. Also supports an optional fallback value. "},{"title":"TitleBar","type":0,"sectionRef":"#","url":"/OnyxUI/api/TitleBar","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"TitleBar","url":"/OnyxUI/api/TitleBar#types","content":" "},{"title":"TitleBarProps​","type":1,"pageTitle":"TitleBar","url":"/OnyxUI/api/TitleBar#TitleBarProps","content":"&lt;/&gt; interface TitleBarProps { ...: FrameProps Content: CanBeState&lt;{string}&gt;? ContentSize: CanBeState&lt;number&gt;? ContentColor: CanBeState&lt;Color3 &gt;? ContentFontFace: CanBeState&lt;Font &gt;? CloseButtonIcon: CanBeState&lt;string&gt;? CloseButtonDisabled: CanBeState&lt;boolean&gt;? OnClose: CanBeState&lt;() → ()&gt;? }  "},{"title":"Types​","type":1,"pageTitle":"TextInput","url":"/OnyxUI/api/TextInput#types","content":" "},{"title":"TextInputProps​","type":1,"pageTitle":"TextInput","url":"/OnyxUI/api/TextInput#TextInputProps","content":"&lt;/&gt; interface TextInputProps { ...: BaseProps Disabled: CanBeState&lt;boolean&gt;? CharacterLimit: CanBeState&lt;number&gt;? Color: CanBeState&lt;Color3 &gt;? PlaceholderText: CanBeState&lt;string&gt;? Text: CanBeState&lt;string&gt;? ClearTextOnFocus: CanBeState&lt;boolean&gt;? TextWrapped: CanBeState&lt;boolean&gt;? MultiLine: CanBeState&lt;boolean&gt;? TextSize: CanBeState&lt;number&gt;? TextColor3: CanBeState&lt;Color3 &gt;? FontFace: CanBeState&lt;Font &gt;? PlaceholderColor3: CanBeState&lt;Color3 &gt;? TextXAlignment: CanBeState&lt;Enum.TextXAlignment&gt;? TextYAlignment: CanBeState&lt;Enum.TextYAlignment&gt;? TextTransparency: CanBeState&lt;number&gt;? IsFocused: CanBeState&lt;boolean&gt;? OnFocused: CanBeState&lt;() → ()&gt;? OnFocusLost: CanBeState&lt;() → ()&gt;? }  "},{"title":"Components","type":0,"sectionRef":"#","url":"/OnyxUI/docs/components","content":"Components You can see the full list of components here. What's a component? If you're unfamiliar with the concept of components, they're basically widgets you can reuse throughout your UI. This is much more efficient than, for example, rescripting a button each time you need one. Extending types Props are documented with the component's name included. When accessing a component's props in code, for example, use Button.Props, not Button.ButtonProps.","keywords":""},{"title":"Production Usage","type":0,"sectionRef":"#","url":"/OnyxUI/docs/in-production","content":"Production Usage These projects use OnyxUI to power their user experience: Loneka​ Scribel​ Climb of Chaos​ List your project If you'd like your game or resource featured here, open an issue or pull request! If it's pretty, I want it listed!","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/OnyxUI/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/OnyxUI/docs/intro#installation","content":""},{"title":"Wally package​","type":1,"pageTitle":"Getting Started","url":"/OnyxUI/docs/intro#wally-package","content":"Copy the Wally detailsPaste it into your wally.toml dependenciesRun wally install "},{"title":"Roblox model​","type":1,"pageTitle":"Getting Started","url":"/OnyxUI/docs/intro#roblox-model","content":"Download the OnyxUI.rbxm file listed hereInsert OnyxUI.rbxm into Roblox Studio "},{"title":"Project structure​","type":1,"pageTitle":"Getting Started","url":"/OnyxUI/docs/intro#project-structure","content":"OnyxUI is structured as a collection of modules. This is unconventional, but necessary for exposing types so you can properly build off of OnyxUI. Here's a basic usage sample below: local OnyxUI = require(path.to.OnyxUI) local Themer = require(OnyxUI.Themer) local Util = require(OnyxUI.Util) -- Components local Card = require(OnyxUI.Components.Card) -- Types export type Props = Card.Props &amp; {} -- This wouldn't work if Card wasn't required directly. -- Component construction return function(Props: Props) return Card { BackgroundColor3 = Util.Colors.Gray[&quot;200&quot;], Padding = Computed(function() return UDim.new(0, Themer.Theme.Spacing[&quot;2&quot;]:get()) end), } end  "},{"title":"See it in action ✨​","type":1,"pageTitle":"Getting Started","url":"/OnyxUI/docs/intro#see-it-in-action-","content":""},{"title":"Theming","type":0,"sectionRef":"#","url":"/OnyxUI/docs/theming","content":"","keywords":""},{"title":"Sample themes​","type":1,"pageTitle":"Theming","url":"/OnyxUI/docs/theming#sample-themes","content":"OnyxNight - The default themeBitCave "},{"title":"Making your own theme​","type":1,"pageTitle":"Theming","url":"/OnyxUI/docs/theming#making-your-own-theme","content":"tip Check out the ThemeTemplate file for a reference of properties you can specify in your theme. Make sure to not include any Fusion Values in yours. Copy the following code into a new &quot;MyTheme&quot; module local Themer = require(OnyxUI.Themer) local Theme: Themer.Theme = { } return Theme Specify properties you want within your Theme table Load it into OnyxUI with Themer:Set(Theme) "},{"title":"Styling Props","type":0,"sectionRef":"#","url":"/OnyxUI/docs/styling-props","content":"","keywords":""},{"title":"Property-based styling​","type":1,"pageTitle":"Styling Props","url":"/OnyxUI/docs/styling-props#property-based-styling","content":"Traditional GuiObject properties like BackgroundColor3 are supported identically to how Roblox does it. Use these as you would normally. There are exceptions however, like how Color is preferred over BackgroundColor3 in Button. "},{"title":"Children-based styling​","type":1,"pageTitle":"Styling Props","url":"/OnyxUI/docs/styling-props#children-based-styling","content":"UIPaddings, UIStrokes, UIListLayouts... Children-based styling is just too much boilerplate. In OnyxUI, all components support an extensive set of props to avoid working with these objects. See references below: "},{"title":"Basics​","type":1,"pageTitle":"Styling Props","url":"/OnyxUI/docs/styling-props#basics","content":"Roblox 🤓\tOnyxUI 😎UICorner\tCornerRadius UIPadding\tPadding, PaddingTop, PaddingLeft, PaddingRight, PaddingBottom UIStroke\tStrokeEnabled, StrokeThickness, StrokeColor, StrokeTransparency, StrokeLineJoinMode, StrokeApplyStrokeMode UIGradient\tGradientEnabled, GradientColor, GradientOffset, GradientRotation, GradientTransparency "},{"title":"Layouts​","type":1,"pageTitle":"Styling Props","url":"/OnyxUI/docs/styling-props#layouts","content":"Roblox 🤓\tOnyxUI 😎UIFlexItem\tFlexMode, FlexItemLineAlignment, FlexGrowRatio, FlexShrinkRatio UIListLayout\tListEnabled, ListPadding, ListFillDirection, ListSortOrder, ListWraps, ListHorizontalAlignment, ListHorizontalFlex, ListVerticalAlignment, ListVerticalFlex, ListItemLineAlignment UIGridLayout\tGridEnabled, GridFillDirection, GridFillDirectionMaxCells, GridCellPadding, GridCellSize, GridSortOrder, GridStartCorner, GridHorizontalAlignment, GridVerticalAlignment For other layouts like UITableLayout and UIPageLayout, see the Base component's source code. "},{"title":"Constraints​","type":1,"pageTitle":"Styling Props","url":"/OnyxUI/docs/styling-props#constraints","content":"Roblox 🤓\tOnyxUI 😎UIAspectRatioConstraint\tAspectRatio, AspectType, DominantAxis UISizeConstraint\tMaxSize, MinSize UITextSizeConstraint\tMaxTextSize, MinTextSize "},{"title":"Use in custom components​","type":1,"pageTitle":"Styling Props","url":"/OnyxUI/docs/styling-props#use-in-custom-components","content":"To support styling props in your own components, make use of the CombineProps utility to pass props through automatically. Your component must be based upon an OnyxUI component such as Base for this to work. "},{"title":"Utilities","type":0,"sectionRef":"#","url":"/OnyxUI/docs/utilities","content":"","keywords":""},{"title":"EnsureValue​","type":1,"pageTitle":"Utilities","url":"/OnyxUI/docs/utilities#ensurevalue","content":"Want to ensure your component props are Fusion Values? This makes it a one-line operation. local Util = require(OnyxUI.Util) return function(Props) local MyProp = Util.EnsureValue(Props.MyProp, &quot;string&quot;, &quot;Default&quot;) end  "},{"title":"CombineProps​","type":1,"pageTitle":"Utilities","url":"/OnyxUI/docs/utilities#combineprops","content":"Let's say you have a &quot;CustomButton&quot; component, and you want it to support Size, Position, and other arbitrary properties. Manually implementing all that boilerplate in the component itself is tedious. So let's have CombineProps do the passthrough for us: local Util = require(OnyxUI.Util) return function(Props) return BaseButton(Util.CombineProps(Props, { BackgroundTransparency = 0, CornerRadius = Computed(function() return UDim.new(0, Themer.Theme.CornerRadius[&quot;1&quot;]:get()) end), -- All properties from OnyxUI's `BaseButton` component will now work. })) end  "},{"title":"Colors​","type":1,"pageTitle":"Utilities","url":"/OnyxUI/docs/utilities#colors","content":"Color shorthands imported from TailwindCSS's color palette. So you don't have to worry about color picking anymore. local Util = require(OnyxUI.Util) return function(Props) return Button { Color = Util.Colors.Red[&quot;500&quot;], -- Shade &quot;500&quot; of Colors.Red } end  "}]